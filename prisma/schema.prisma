// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * * ====== USER & PROFILE ====== **
 */
model User {
  id        String   @id @default(uuid()) @map("id")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")

  // relações
  profile            UserProfile?
  posts              Post[]
  postLikes          PostLike[]
  followsAsFollower  Follow[]     @relation("follows_as_follower")
  followsAsFollowing Follow[]     @relation("follows_as_following")

  // social com News
  comments Comment[]
  likes    Like[]
  News     News[]

  @@map("User")
}

model UserProfile {
  id        String  @id @default(uuid()) @map("id")
  userId    String  @unique @map("userId")
  name      String? @map("name")
  bio       String? @map("bio")
  avatarUrl String? @map("avatarUrl")

  user User @relation(fields: [userId], references: [id])

  @@map("UserProfile")
}

/**
 * * ====== SOCIAL: POST / LIKE / FOLLOW ====== **
 */
model Post {
  id        String   @id @default(uuid()) @map("id")
  authorId  String   @map("authorId")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")

  author User       @relation(fields: [authorId], references: [id])
  likes  PostLike[]

  @@map("Post")
}

model PostLike {
  id        String   @id @default(uuid()) @map("id")
  postId    String   @map("postId")
  userId    String   @map("userId")
  createdAt DateTime @default(now()) @map("createdAt")
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId]) // <— ESTA LINHA
  @@map("PostLike")
}

model Follow {
  id          String   @id @default(uuid()) @map("id")
  followerId  String   @map("followerId")
  followingId String   @map("followingId")
  createdAt   DateTime @default(now()) @map("createdAt")

  follower  User @relation("follows_as_follower", fields: [followerId], references: [id])
  following User @relation("follows_as_following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("Follow")
}

/**
 * * ====== NEWS + COMMENT + LIKE (para /api/news) ====== **
 */
model Comment {
  id        String   @id @default(uuid()) @map("id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")

  authorId String @map("authorId")
  newsId   String @map("newsId")

  User User @relation(fields: [authorId], references: [id])
  News News @relation(fields: [newsId], references: [id])

  @@map("Comment")
}

model Like {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("userId")
  newsId    String   @map("newsId")
  createdAt DateTime @default(now()) @map("createdAt")

  User User @relation(fields: [userId], references: [id])
  News News @relation(fields: [newsId], references: [id])

  @@unique([userId, newsId])
  @@map("Like")
}

model News {
  id        String   @id @default(uuid()) @map("id")
  title     String   @map("title")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("createdAt")

  authorId String @map("authorId")

  // relações
  User    User      @relation(fields: [authorId], references: [id]) // <— relação com nome "User"
  Comment Comment[]
  Like    Like[]

  @@map("News")
}
